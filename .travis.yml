# this file is HEAVILY influenced by https://github.com/boostorg/hana/blob/master/.travis.yml

dist: bionic
language: c++

cache: ccache

notifications:
  email: false

git:
  depth: 5

addons:
  # these apt sources will be referenced later (by using *name)
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
    config:
      retries: true

compiler: gcc
os: linux

# We have branch builds disabled globally to prevent double-builds of PRs.
# This re-enables just the master branch.
branches:
  only:
  - master
  - development

# Overall strategy for what sorts of builds to include:
# We want a build for each compiler and each platform.
# For PRs, we lessen the "each compiler" requirement to just covering the newest
# and oldest relevant version of each compiler.
# We also want to ensure that each of the following tweaks are covered in at
# least one PR build:
# - TILES=1
# - SOUND=1
# - RELEASE=1
# - CMAKE=1
# - SANITIZE=address
# - LOCALIZE=0
# - A clang-tidy run (now switched to GitHub workflow)
# - Tests with important mods enabled (Magiclysm)
# We try to minimize the number of builds subject to those constraints.

# To see what toolchains are available, consult the following:
# https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
# https://launchpad.net/%7Eubuntu-toolchain-r/+archive/ubuntu/test/+index

jobs:
  include:
    # Initial test stage, if this fails everything else is canceled.
    - stage: "Main Compilers"

    - env: CLANG=clang++-10 SANITIZE=address,undefined EXTRA_TEST_OPTS="~[.] ~vehicle_efficiency ~vehicle_drag ~starting_items ~[starve] ~grenade_lethality"
      name: "Clang 10 Make build with sanitizers enabled, but long-running tests disabled"
      compiler: clang
      addons: &clang10
        apt:
          packages:
            - clang-10
          sources:
            - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"


before_script:
  - if [ -n "${CLANG}" ]; then COMPILER="$CLANG"; fi
  - ${COMPILER} --version
  - CXX="$COMPILER"
  - source build-scripts/requirements.sh

script:
  - build-scripts/build.sh

after_success:
  - if [ -n "${CODE_COVERAGE}" ]; then coveralls -b . -i src -e tests --gcov /usr/bin/gcov-6; fi
  - if [ -n "${CODE_COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash); fi
